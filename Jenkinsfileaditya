pipeline {
    agent any
    tools{
        maven 'maven'
        jdk 'jdk17'
    }
    
    environment{
        scanner = tool 'sonarqube'
    }

    stages {
        stage('checlout') {
            steps {
                git branch: 'main', url: 'https://github.com/Mahi-tes/Boardgame.git'
            }
        }
        
        stage('compile') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('test') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('package') {
            steps {
                sh 'mvn package'
            }
        }
        
        stage('trivy fs scan') {
            steps {
                sh 'trivy fs --format table -o report.txt .'
            }
        }
        
        stage('sonarscanner') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh '''$scanner/bin/sonar-scanner -Dsonar.projectKey=Boardgame -Dsonar.projectName=Boardgame\
                    -Dsonar.java.binaries=target'''
                }
            }
        }
        
        stage('qualitygate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                 waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                            }
            }
        }
        
        stage('nexusrepo') {
            steps {
                withMaven(globalMavenSettingsConfig: 'b0f750a2-43ff-4e24-b6d4-1b540c5468f3', jdk: '', maven: 'maven', mavenSettingsConfig: '', traceability: true) {
                 sh 'mvn deploy'
               }
            }
        }
        
         stage('docker build') {
            steps {
               withDockerRegistry(credentialsId: 'docker-cred',url:'https://index.docker.io/v1/') {
                 sh 'docker build -t 1mahendra/board:latest .'
                }
            }
        }
        
        stage('trivy image scan') {
            steps {
                sh 'trivy image --format table -o image.txt 1mahendra/board:latest'
            }
        }
        stage('docker push') {
            steps {
               withDockerRegistry(credentialsId: 'docker-cred',url:'https://index.docker.io/v1/') {
                 sh 'docker push 1mahendra/board:latest'
                }
            }
        }
        
        stage('kubernates deployment') {
            steps {
               withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8-secret', namespace: 'mahendra', restrictKubeConfigAccess: false, serverUrl: 'https://172.31.23.93:6443') {
                sh 'kubectl apply -f deployment-service.yaml'
             }
            }
        }
        
       
    }
    
    post {
    always {
        script {
            def jobName = env.JOB_NAME
            def buildNumber = env.BUILD_NUMBER
            def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
            def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

            def body = """
                <html>
                <body>
                <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                <h2>${jobName} - Build ${buildNumber}</h2>
                <div style="background-color: ${bannerColor}; padding: 10px;">
                <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                </div>
                <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                </div>
                </body>
                </html>
            """

            emailext (
                subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                body: body,
                to: 'devopstrainingpms@gmail.com',
                from: 'jenkins@devops.com',
                replyTo: 'jenkins@devops.com',
                mimeType: 'text/html',
               
            )
        }
    }
}

}
